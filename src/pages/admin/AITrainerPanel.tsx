import { useState, useEffect } from 'react';
import axios from 'axios';
import { API_BASE_PATH } from '@lib/api';
import { toast } from 'react-toastify';

interface TrainingInfo {
  lastTrained: string | null;
  nextTraining: string | null;
  articlesAnalyzed: number;
  keywords: number;
  patternFocus: string;
  modulesTrained: string[];
  lockedByFounder: boolean;
  modelVersion?: string;
  trainer?: string;
  note?: string;
}

export default function AITrainerPanel() {
  const [trainingInfo, setTrainingInfo] = useState<TrainingInfo | null>(null);
  const [feedback, setFeedback] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [loading, setLoading] = useState(true);

  const fetchTrainingInfo = async () => {
    try {
  console.log('📡 Fetching: AI training info');
  const res = await axios.get(`${API_BASE_PATH}/system/ai-training-info`, { withCredentials: true });
      console.log('✅ API Response:', res.data);

      const data = res.data;
      if (data?.success && data?.data) {
        setTrainingInfo({
          lastTrained: data.data.lastTrained || null,
          nextTraining: data.data.nextTraining || null,
          articlesAnalyzed: data.data.articlesAnalyzed || 0,
          keywords: data.data.keywords || 0,
          patternFocus: data.data.patternFocus || '',
          modulesTrained: data.data.modulesTrained || [],
          lockedByFounder: data.data.lockedByFounder || false,
          modelVersion: data.data.modelVersion || 'v1.0',
          trainer: data.data.trainer || 'AutoCore',
          note: data.data.statusNote || ''
        });
      } else {
        console.warn('⚠️ Incomplete response structure:', data);
        toast.error('⚠️ AI training info is incomplete.');
        setTrainingInfo(null);
      }
    } catch (err: any) {
      console.error('❌ AI Trainer fetch failed:', err?.response?.data || err.message, err);
      toast.error('❌ Failed to load AI training info.');
      setTrainingInfo(null);
    } finally {
      setLoading(false);
    }
  };

  const handleRetrainNow = async () => {
    setIsSubmitting(true);
    try {
      const updatedData: TrainingInfo = {
        lastTrained: new Date().toISOString(),
        nextTraining: new Date(Date.now() + 72 * 60 * 60 * 1000).toISOString(),
        articlesAnalyzed: Math.floor(Math.random() * 2000) + 1000,
        keywords: Math.floor(Math.random() * 100),
        patternFocus: 'Smart Engagement Optimization',
        modulesTrained: ['Summarizer', 'SEO Analyzer', 'TrustMeter'],
        lockedByFounder: false,
        modelVersion: 'v1.1',
        trainer: 'KiranOS AutoCore',
        note: 'Auto-generated by system retrain button.'
      };

  const res = await axios.put(`${API_BASE_PATH}/system/ai-training-info`, updatedData, { withCredentials: true });
      if (res.data?.success) {
        toast.success('✅ AI retrained successfully!');
        setTrainingInfo(res.data.data);
      } else {
        toast.error('⚠️ Retrain failed.');
      }
    } catch (err: any) {
      console.error('❌ Retrain error:', err?.response?.data || err.message);
      toast.error('❌ Failed to retrain AI.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleSubmitFeedback = async () => {
    if (!feedback.trim()) return;
    setIsSubmitting(true);
    try {
      await axios.post(`${API_BASE_PATH}/system/ai-diagnostics/ai-trainer/log`, {
        command: 'feedback',
        result: feedback.trim(),
        pattern: 'user-guided'
      }, { withCredentials: true });
      toast.success('✅ Feedback submitted!');
      setFeedback('');
    } catch (err: any) {
      console.error('❌ Feedback submit failed:', err?.response?.data || err.message);
      toast.error('❌ Failed to submit feedback.');
    } finally {
      setIsSubmitting(false);
    }
  };

  useEffect(() => {
    fetchTrainingInfo();
    const interval = setInterval(fetchTrainingInfo, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="p-6 text-white bg-slate-800 rounded-xl shadow space-y-6">
      <h2 className="text-2xl font-bold flex items-center gap-3">
        🧠 AI Trainer Panel
        {trainingInfo && (
          <span className={`text-sm font-semibold px-2 py-1 rounded-full ${
            trainingInfo.lockedByFounder ? 'bg-red-600' : 'bg-green-600'
          }`}>
            {trainingInfo.lockedByFounder ? '🔴 Locked' : '🟢 Active'}
          </span>
        )}
      </h2>

      {loading ? (
        <p className="text-yellow-300">⏳ Loading training status...</p>
      ) : trainingInfo ? (
        <div className="bg-slate-700 p-4 rounded-md space-y-1 text-sm">
          <p>📅 <strong>Last Trained:</strong> {trainingInfo.lastTrained ? new Date(trainingInfo.lastTrained).toLocaleString() : 'Not yet trained'}</p>
          <p>⏭ <strong>Next Training:</strong> {trainingInfo.nextTraining ? new Date(trainingInfo.nextTraining).toLocaleString() : 'Not scheduled'}</p>
          <p>📰 <strong>Articles Analyzed:</strong> {trainingInfo.articlesAnalyzed}</p>
          <p>🔑 <strong>Keywords Identified:</strong> {trainingInfo.keywords}</p>
          <p>🎯 <strong>Pattern Focus:</strong> {trainingInfo.patternFocus}</p>
          <p>🧩 <strong>Modules Trained:</strong> {trainingInfo.modulesTrained.join(', ')}</p>
          <p>📦 <strong>Model Version:</strong> {trainingInfo.modelVersion}</p>
          <p>🧠 <strong>Trainer:</strong> {trainingInfo.trainer}</p>
          <p>📝 <strong>Note:</strong> {trainingInfo.note}</p>
        </div>
      ) : (
        <div>
          <p className="text-red-400">⚠️ No training info available.</p>
          <button
            onClick={fetchTrainingInfo}
            className="mt-2 bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded"
          >
            🔁 Retry
          </button>
        </div>
      )}

      <div className="flex gap-4">
        <button
          className="bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded disabled:opacity-50"
          onClick={handleRetrainNow}
          disabled={isSubmitting}
        >
          🔄 Retrain Now
        </button>
      </div>

      <div>
        <textarea
          className="w-full border border-slate-500 bg-slate-900 text-white p-2 rounded mt-4"
          placeholder="💡 Suggest improvements or training feedback..."
          rows={4}
          value={feedback}
          onChange={(e) => setFeedback(e.target.value)}
        />
        <button
          className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded mt-2 disabled:opacity-50"
          onClick={handleSubmitFeedback}
          disabled={isSubmitting || !feedback.trim()}
        >
          📤 Submit Feedback
        </button>
      </div>
    </div>
  );
}
