import React, { useEffect, useState } from 'react';
import axios from 'axios';

type MediaItem = {
  id: string;
  url: string;
  filename?: string;
  rights?: string;
  width?: number;
  height?: number;
  aiAltText?: string | null;
};

export default function MediaLibrary(): JSX.Element {
  const [items, setItems] = useState<MediaItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    fetchMedia();
  }, []);

  async function fetchMedia() {
    setLoading(true);
    try {
      // try vault list first (backend route exists), fallback to uploads
      const res = await axios.get('/api/vault/list').catch(() => axios.get('/api/uploads'));
      const data = res?.data?.items || res?.data || [];
      // normalize
      const normalized: MediaItem[] = (Array.isArray(data) ? data : []).map((m: any) => ({
        id: m.id || m._id || m.filename || m.url,
        url: m.url || m.path || m.filename,
        filename: m.filename || m.name,
        rights: m.rights || m.license || 'unknown',
        width: m.width,
        height: m.height,
        aiAltText: m.aiAltText || null,
      }));
      setItems(normalized);
    } catch (err) {
      console.error('Failed to fetch media:', err);
    } finally {
      setLoading(false);
    }
  }

  async function handleUpload(e: React.ChangeEvent<HTMLInputElement>) {
    const file = e.target.files?.[0];
    if (!file) return;
    setUploading(true);
    try {
      const fd = new FormData();
      fd.append('file', file);
      // backend uploads route expects form-data (there's an /api/uploads route)
      const res = await axios.post('/api/uploads', fd, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      // optimistic refresh
      await fetchMedia();
      if (res?.data?.success) alert('Upload succeeded');
    } catch (err) {
      console.error('Upload error:', err);
      alert('Upload failed — check console');
    } finally {
      setUploading(false);
      (e.target as HTMLInputElement).value = '';
    }
  }

  async function generateAIAlt(item: MediaItem) {
    // If backend AI endpoint exists, call it; else simulate
    try {
      const res = await axios.post('/api/ai/alt-text', { url: item.url }).catch(() => null);
      if (res && res.data && res.data.alt) {
        const updated = items.map((it) => (it.id === item.id ? { ...it, aiAltText: res.data.alt } : it));
        setItems(updated);
        return;
      }
      // simulate
      const simulated = `Photo of ${item.filename || 'an image'} — auto-generated by AI`;
      const updated = items.map((it) => (it.id === item.id ? { ...it, aiAltText: simulated } : it));
      setItems(updated);
    } catch (err) {
      console.error('AI alt generation failed:', err);
    }
  }

  async function scrubEXIF(item: MediaItem) {
    try {
      // call a scrub endpoint if available
      await axios.post('/api/uploads/scrub-exif', { url: item.url }).catch(() => null);
      alert('EXIF scrub requested (or simulated)');
    } catch (err) {
      console.error('EXIF scrub failed:', err);
      alert('EXIF scrub failed');
    }
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-semibold">Media Library</h2>
        <div className="flex items-center gap-3">
          <label className="bg-blue-600 text-white px-3 py-1 rounded cursor-pointer">
            {uploading ? 'Uploading…' : 'Upload'}
            <input type="file" onChange={handleUpload} className="hidden" />
          </label>
          <button onClick={fetchMedia} className="px-3 py-1 rounded bg-slate-200 text-sm">Refresh</button>
        </div>
      </div>

      <div className="bg-white dark:bg-slate-800 p-4 rounded shadow">
        {loading ? (
          <div>Loading media…</div>
        ) : items.length === 0 ? (
          <div className="text-sm text-slate-500">No media found. Upload to get started.</div>
        ) : (
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
            {items.map((it) => (
              <div key={it.id} className="border rounded overflow-hidden bg-slate-50 dark:bg-slate-700">
                <div className="h-40 w-full bg-gray-100 flex items-center justify-center overflow-hidden">
                  <img src={it.url} alt={it.aiAltText || it.filename || 'media'} className="object-cover h-full w-full" />
                </div>
                <div className="p-2 text-xs">
                  <div className="font-medium truncate">{it.filename || it.url}</div>
                  <div className="text-slate-500">Rights: {it.rights}</div>
                  <div className="mt-2 flex gap-2">
                    <button onClick={() => generateAIAlt(it)} className="px-2 py-1 bg-indigo-600 text-white rounded text-xs">
                      AI Alt
                    </button>
                    <button onClick={() => scrubEXIF(it)} className="px-2 py-1 bg-amber-600 text-white rounded text-xs">
                      Scrub EXIF
                    </button>
                    <button onClick={() => navigator.clipboard?.writeText(it.url)} className="px-2 py-1 bg-slate-300 rounded text-xs">
                      Copy URL
                    </button>
                  </div>
                  {it.aiAltText && (
                    <div className="mt-2 text-xs text-slate-700 dark:text-slate-200">Alt: {it.aiAltText}</div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
